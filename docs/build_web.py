#!/usr/bin/env python3
"""
Build script for web interface files.

This script generates the web interface files from the original source files:
1. Copies bwt_svg/ files to docs/bwt_svg/ with fixed imports for Pyodide
2. Generates docs/bwt_web.py as a consolidated single file

Helps to keep the original implementations in the original python source files,
so we don't have duplication.

Usage:
    cd docs
    python build_web.py

Author: Ben Langmead
Date: 10/13/2025
"""

import os
import shutil
from pathlib import Path

def main():
    """Build web interface files from source."""
    print("Building web interface files...")

    # Get paths
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    source_dir = project_root / "bwt_svg"
    target_dir = script_dir / "bwt_svg"

    # Clean existing generated files
    if target_dir.exists():
        print(f"Removing existing {target_dir}")
        shutil.rmtree(target_dir)

    if (script_dir / "bwt_web.py").exists():
        print("Removing existing bwt_web.py")
        os.remove(script_dir / "bwt_web.py")

    # Create target directory
    target_dir.mkdir(exist_ok=True)
    print(f"Created {target_dir}")

    # Copy and fix files
    copy_and_fix_file(source_dir / "bwt.py", target_dir / "bwt.py")
    copy_and_fix_file(source_dir / "svgize.py", target_dir / "svgize.py")
    copy_and_fix_file(source_dir / "__init__.py", target_dir / "__init__.py")

    # Generate consolidated bwt_web.py
    generate_bwt_web(target_dir, script_dir)

    print("Build complete!  Generated files:")
    print(f"  - {target_dir}/")
    print(f"  - {script_dir}/bwt_web.py")

def copy_and_fix_file(source_path, target_path):
    """Copy a file and fix imports for Pyodide."""
    print(f"Copying {source_path} -> {target_path}")

    with open(source_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # Fix imports for Pyodide
    if source_path.name == "svgize.py":
        # Fix relative import
        content = content.replace("from .bwt import BwtSuite", "from bwt import BwtSuite")
    elif source_path.name == "__init__.py":
        # Fix relative imports
        content = content.replace("from .bwt import BwtSuite", "from bwt import BwtSuite")
        content = content.replace("from .svgize import render, print_arrays, main",
                                 "from svgize import render, print_arrays, main")

    with open(target_path, 'w', encoding='utf-8') as f:
        f.write(content)

def generate_bwt_web(bwt_svg_dir, output_dir):
    """Generate consolidated bwt_web.py file."""
    print("Generating consolidated bwt_web.py...")

    # Read source files
    with open(bwt_svg_dir / "bwt.py", 'r', encoding='utf-8') as f:
        bwt_content = f.read()

    with open(bwt_svg_dir / "svgize.py", 'r', encoding='utf-8') as f:
        svgize_content = f.read()

    # Remove imports from svgize.py but keep necessary ones
    lines = svgize_content.split('\n')
    filtered_lines = []
    
    for line in lines:
        if line.strip().startswith('import ') or line.strip().startswith('from '):
            # Keep contextlib import since it's used in the code
            if 'contextlib' in line or 'contextmanager' in line:
                filtered_lines.append(line)
            # Remove other imports (argparse, relative imports, bwt imports)
            continue
        elif line.strip().startswith("if __name__ == '__main__':"):
            # Remove the main execution block since we don't need CLI in web interface
            continue
        else:
            filtered_lines.append(line)
    
    svgize_content = '\n'.join(filtered_lines)

    # Combine into single file
    consolidated = f"""#!/usr/bin/env python3
\"\"\"
Consolidated BWT-SVG code for Pyodide web interface.

This file is auto-generated by build_web.py from the original source files.
Do not edit manually - changes will be overwritten.
\"\"\"

# Original bwt.py content
{bwt_content}

# Original svgize.py content (imports removed)
{svgize_content}
"""

    # Write consolidated file
    output_path = output_dir / "bwt_web.py"
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(consolidated)

    print(f"Generated {output_path}")

if __name__ == "__main__":
    main()
